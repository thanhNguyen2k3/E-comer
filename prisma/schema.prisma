generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    isAdmin         Boolean   @default(false)
    username        String?   @unique
    address         String?
    fullName        String?
    specificAddress String?
    phoneNumber     Int?
    accounts        Account[]
    sessions        Session[]
    Order           Order[]
    image           String?
}

model Product {
    id          String        @id @default(cuid())
    name        String
    shortDes    String
    description String
    images      String[]
    price       Int
    saleOff     Int?          @default(0)
    slug        String?       @unique
    categoryId  String?
    quantity    Int?
    category    Category?     @relation(fields: [categoryId], references: [id])
    extraOption ExtraOption[]
    sizes       String[]
    orders      Order[]
    deleted     Boolean       @default(false)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model Category {
    id        String    @id @default(cuid())
    name      String
    thumbnail String
    slug      String?
    products  Product[]
}

model ExtraOption {
    id         String   @id @default(cuid())
    extraName  String
    productId  String?
    extraPrice Int?
    product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
    id         String      @id @default(cuid())
    productId  String?
    products   Product?    @relation(fields: [productId], references: [id])
    userId     String
    user       User        @relation(fields: [userId], references: [id])
    shipId     String?
    shipOption ShipOption? @relation(fields: [shipId], references: [id])
    quantity   Int?
    total      Int?
    extraName  String?
    status     StatusOrder
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

model ShipOption {
    id     String  @id @default(cuid())
    status String
    orders Order[]
}

enum StatusOrder {
    ORDERED
    PICKING
    DELEVERING
    COMPLETE
}
